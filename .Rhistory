library(readxl)
dados = read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx", sheet = "A_E_Fire_Dataset")
setwd("C:/DSA/FCD/BigDataRAzure/Projeto2/Prevendo-Eficiencia-Extintores-Incendio")
dados = read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx", sheet = "A_E_Fire_Dataset")
dados = as.data.frame(dados)
dim(dados)
# Checando valores missing
sum(is.na(dados))
# Checando os tipos de dados
str(dados)
# Transformando os tipos de dados
dados$SIZE = as.factor(dados$SIZE)
dados$FUEL = as.factor(dados$FUEL)
dados$STATUS = as.factor(dados$STATUS)
# Checando os tipos de dados
str(dados)
summary(dados)
table(dados$DISTANCE)
table(dados$DESIBEL)
table(dados$AIRFLOW)
table(dados$FREQUENCY)
table(dados$STATUS)
summary(dados)
# Checando a fequência dos dados, para verificar se precisaremos usar
# alguma técnica para balancear os dados
summary(dados)
# Checando os tipos de dados
str(dados)
# Vamos vizualizar as variáveis numéricas com o boxplot
col_names = names(dados)
lapply(col_names, function(x){
if(!is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_boxplot() +
ggtitle(paste("Boxplot de", x))}})
library(ggplot2)
lapply(col_names, function(x){
if(!is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_boxplot() +
ggtitle(paste("Boxplot de", x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
library(randomForest)
View(dados)
modelo_escolha_variaveis = randomForest(STATUS ~ ., data = dados,
ntree = 100, nodesize = 10, importance = TRUE)
varImpPlot(modelo_escolha_variaveis)
library(caret)
index = createDataPartition(dados$STATUS, p = .70, list = FALSE)
treino = dados[index, ]
teste = dados[-index, ]
dim(treino)
dim(teste)
library(e1071)
library(class)
?knn
treino_labels = dados[index, 7]
teste_labels = dados[-index, 7]
library(gmodels)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = dados_treino_labels,
k = 21)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 21)
# Checando valores missing
sum(is.na(dados))
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 21)
length(treino_labels)
?knn
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 6)
View(dados)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 6)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 5)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 1)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 10)
treino_labels
# Checando os tipos de dados
str(dados)
# Checando valores missing
sum(is.na(dados))
# Checando valores missing
sum(is.na(dados$STATUS))
str(treino)
str(teste)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 6)
dados$FUEL = as.numeric(as.factor(dados$FUEL))
View(dados)
# Checando os tipos de dados
str(dados)
dados = read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx", sheet = "A_E_Fire_Dataset")
dados = as.data.frame(dados)
View(dados)
dim(dados)
# Checando valores missing
sum(is.na(dados$STATUS))
# Checando os tipos de dados
str(dados)
dados$FUEL = as.numeric(as.factor(dados$FUEL))
# Checando os tipos de dados
str(dados)
dados$STATUS = as.factor(dados$STATUS)
# Checando os tipos de dados
str(dados)
# Checando a fequência dos dados, para verificar se precisaremos usar
# alguma técnica para balancear os dados
summary(dados)
table(dados$FUEL)
# Vamos vizualizar as variáveis numéricas com o boxplot
col_names = names(dados)
# Criando os dados de treino e de teste com o pacote caret
index = createDataPartition(dados$STATUS, p = .70, list = FALSE)
treino = dados[index, ]
teste = dados[-index, ]
dim(treino)
dim(teste)
# Criando o primeiro modelo com o knn
treino_labels = dados[index, 7]
teste_labels = dados[-index, 7]
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 6)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 21)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
modelo_knn_v1
summary(modelo_knn_v1)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 6)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 15)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
set.seed(105)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
