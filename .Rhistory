setwd("C:/DSA/FCD/BigDataRAzure/Cap11/Classificacao")
dados <- read.csv("dataset.csv")
str(dados)
View(dados)
dados$id = NULL
attach(dados)
dados$diagnosis = sapply(dados$diagnosis, function(x){ifelse(x == "M", "Maligno", "Benigno")})
View(dados)
# Muitos classificadores requerem que as variáveis sejam do tipo Fator
table(diagnosis)
diagnosis = factor(diagnosis, levels = c("Benigno", "Maligno"), labels = c("Benigno", "Maligno"))
str(diagnosis)
round(prop.table(table(diagnosis)) * 100, 1)
summary(dados[c("radius_mean", "area_mean", "smoothness_mean")])
normalizar <- function(x){
return((x - min(x)) / (max(x) - min(x)))
}
normalizar(c(1,2,3,4,5))
normalizar(c(10,20,30,40,50))
dados_norm = as.data.frame(lapply(dados[2:31], normalizar))
View(dados_norm)
library(class)
dados_treino = dados_norm[1:469, ]
dados_teste = dados_norm[470:569, ]
dados_treino_labels = dados[1:469, 1]
dados_teste_labels = dados[470:569, 1]
length(dados_treino_labels)
length(dados_teste_labels)
modelo_knn_v1 = knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
modelo_knn_v1
summary(modelo_knn_v1)
library(gmodels)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
?scale
dados_z = as.data.frame(scale(dados[-1]))
summary(dados_z$area_mean)
dados_treino = dados_z[1:469, ]
dados_teste = dados_z[470:569, ]
dados_treino_labels = dados[1:469, 1]
dados_teste_labels = dados[470:569, 1]
modelo_knn_v2 = knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
summary(modelo_knn_v2)
CrossTable(x = dados_teste_labels, y = modelo_knn_v2, prop.chisq = FALSE)
modelo_knn_v3 = knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 5)
CrossTable(x = dados_teste_labels, y = modelo_knn_v3, prop.chisq = FALSE)
modelo_knn_v4 = knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 10)
CrossTable(x = dados_teste_labels, y = modelo_knn_v4, prop.chisq = FALSE)
setwd("C:/DSA/FCD/BigDataRAzure/Projeto2/Prevendo-Eficiencia-Extintores-Incendio")
library(readxl)
library(ggplot2)
library(randomForest)
library(caret)
library(e1071)
library(class)
library(gmodels)
dados = read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx", sheet = "A_E_Fire_Dataset")
dados = as.data.frame(dados)
View(dados)
dim(dados)
# Checando valores missing
sum(is.na(dados$STATUS))
# Checando os tipos de dados
str(dados)
# Transformando os tipos de dados
dados$SIZE = as.factor(dados$SIZE)
dados$FUEL = as.numeric(as.factor(dados$FUEL))
dados$STATUS = as.factor(dados$STATUS)
# Vamos vizualizar as variáveis numéricas com o boxplot
col_names = names(dados)
# Criando os dados de treino e de teste com o pacote caret
index = createDataPartition(dados$STATUS, p = .70, list = FALSE)
treino = dados[index, ]
teste = dados[-index, ]
dim(treino)
dim(teste)
# Criando o primeiro modelo com o knn
treino_labels = dados[index, 7]
teste_labels = dados[-index, 7]
set.seed(105)
modelo_knn_v1 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 7)
summary(modelo_knn_v1)
CrossTable(x = teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
?confusionMatrix
summary(modelo_knn_v1)
confusionMatrix(modelo_knn_v1)
confusionMatrix(summary(modelo_knn_v1))
confusionMatrix(summary(modelo_knn_v1), reference = 1)
confusionMatrix(summary(modelo_knn_v1), reference = teste_labels)
confusionMatrix(modelo_knn_v1, reference = teste_labels)
normalizar <- function(x){
return((x - min(x)) / (max(x) - min(x)))
}
normalizar(c(1,2,3,4,5))
normalizar(c(10,20,30,40,50))
dados_norm = as.data.frame(lapply(dados[1:6], normalizar))
# Checando os tipos de dados
str(dados)
dados_norm = as.data.frame(lapply(dados[2:6], normalizar))
View(dados_norm)
treino_normal = dados_norm[index, ]
teste_normal = dados_norm[-index, ]
treino_labels_normal = dados_norm[index, 7]
teste_labels_normal = dados_norm[-index, 7]
modelo_knn_v2 = knn(train = treino_normal,
test = teste_normal,
cl = treino_labels_normal,
k = 7)
index_normal = createDataPartition(dados_norm$STATUS, p = .70, list = FALSE)
modelo_knn_v2 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 5)
CrossTable(x = teste_labels, y = modelo_knn_v2, prop.chisq = FALSE)
confusionMatrix(modelo_knn_v2, reference = teste_labels)
modelo_knn_v3 = knn(train = treino,
test = teste,
cl = treino_labels,
k = 10)
CrossTable(x = teste_labels, y = modelo_knn_v3, prop.chisq = FALSE)
confusionMatrix(modelo_knn_v3, reference = teste_labels)
modelo_svm_v1 <- svm(STATUS ~ .,
data = treino,
type = 'C-classification',
kernel = 'radial')
previsao_svm_v1 = predict(modelo_svm_v1, teste)
mean(previsao_svm_v1 == teste$STATUS)
table(previsao_svm_v1, teste$STATUS)
modelo_rf_v1 = randomForest(STATUS ~ .,
data = treino,
ntree = 100,
nodesize = 10)
print(modelo_rf_v1)
previsao_rf_v1 = predict(modelo_rf_v1, teste)
table(previsao_rf_v1, teste$STATUS)
mean(previsao_rf_v1 == teste$STATUS)
